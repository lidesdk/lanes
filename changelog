Changes since version 3.8.3:

    set_finalizer throws an error if provided finalizer isn't a function
    fix error handling when the error doesn't generate an error handler call (IOW, all errors but LUA_ERRRUN)
    provide callstack if LUA_ERRRUN occurs inside a finalizer
    Fixed crash when using protect_allocator option
    new exposed variable linda.null that exposes the internal NIL_SENTINEL marker
    linda:send() interprets send key linda.null as authorization to silently send a single nil when not provided with anything to send (useful when sending results of a function that can return nothing)
    Internal rework: the whole Lanes engine now works "per universe" to allow concurrent Lanes execution in more than one embedded master state
        this universe is a full userdata created in the master state, selfdestruct_gc is the __gc for this userdata
        most of what was initialized only once is now per-universe
        Added forgotten mutex desinitialisation at universe shutdown
        Fix lookup database table not being created when it should if Lanes is required in more than one Lua master state
    Fixed potential crashes at desinit if problems occur during keeper states initialization
    Fixed require() not always serialized properly
    Make sure we don't mutex-wrap require() more than once, just in case
    Raise an error instead of crashing on deep userdata prelude memory allocation failure
    raise an error instead of dereferencing a NULL pointer on deep userdata creation and lane struct creation
    removed some keeper desinit legacy dead code
    keeper array is allocated with master state's alloc function instead of malloc()/free()
    prevent application crash when specifying a very large number of keepers in the configuration options
    any error occuring during one-time inits is raised outside the one-time mutex protected code region
    lanes.linda() accepts an optional integer group to give control on keeper state repartition
    keepers now require "package", receive package.path & package.cpath, and call on_state_create() if it is a C function
    changed the deep public API (improved deep idfunc signature, renamed luaG_deep_userdata to luaG_newdeepuserdata)
    if an error occurs while copying a deep userdata, don't raise inside the keeper state
    fixed situations where raised errors could lead to memory leaks (deep gc)
    fixed a possible Lua stack overflow when calling linda:dump()
    new API linda:cancel("read"|"write"|"both"|"none")
        all linda operations return lanes.cancel_error on a cancelled linda
        lanes.genlock() and lanes.genatomic() support cancelled lindas by returning lanes.cancel_error whenever appropriate
        linda:limit() returns lanes.cancel_error on a limited linda
        fixed cases where linda:send() and linda:receive() would not return lanes.cancel_error when they should
    raised an internal string length so that longer linda names are fully output before truncation applies when doing tostring( linda)
    another Lua stack overflow fix when sending complex function through lindas or as lane body
